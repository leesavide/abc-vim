%
% decomanual.abc - MANUAL PARA CRIAÇÃO DE NOVOS SÍMBOLOS EM abcm2ps
% Hudson Lacerda (2004-2006)
% http://geocities.yahoo.com.br/hfmlacerda/

% 21/08/2004 (04/10/2004) (08/11/2004) (05/01/2005) (18/01/2005) (04/04/2005)
% (14/10/2005) (24/04/2006)

% Copyright (C) 2004-2005 Hudson Lacerda
% This document is released under the terms of the GNU General Public License, Version 2.
% Este documento é distribuído segundo os termos da Licença Pública Geral do GNU, Versão 2.

% abcm2ps-4.6.7
% abcm2ps-4.8.0
% abcm2ps-4.8.8
% abcm2ps-4.11.8
% abcm2ps-4.12.15

%%bstemdown
%%setdefl 1
%%footerfont Courier 9

% %lineskipfac 1.5

%%leftmargin 1.5cm
%%rightmargin 1.5cm

%%scale .8
%%subtitlefont Times-Italic 18

%%textfont  Times-Roman 16   % texto normal
%%setfont-1 Times-Italic 16  % ênfase
%%setfont-2 Courier 16       % nome de programa
%%setfont-3 Courier-Bold 14  % código
%%setfont-4 Times-Bold 24   % título

%%topspace -10
%%titlespace 0
%%subtitlespace 0
%%composerspace 0
%%musicspace -5



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! FOLHA DE ROSTO !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%footer "$D		$V"
%%vskip 100

X:0
%%continueall
K:C
%%textfont * 30
%%center Criação de novos símbolos em abcm2ps
%%textfont * 16
%%center Hudson Lacerda (2004-2006)
%%vskip 100
%%textfont Times-Bold 20
%%center Conteúdo
%%textfont Times-Roman 16
%%begintext
- (Re)definição de operadores PostScript

- Novos símbolos (\%\%deco)
  . Como criar uma decoração do tipo 0
  . Como criar uma decoração do tipo 1
  . Como criar uma decoração do tipo 2
  . Como criar uma decoração do tipo 3
  . Como criar uma decoração do tipo 4
  . Como criar uma decoração do tipo 6
  . Como criar uma decoração do tipo 5
  . Como criar uma decoração do tipo 7
  . Como criar uma decoração head-xxx (cabeça de nota)
  . Decorações em notas individuais de acordes

- Acidentes microtonais

- Alguns operadores especiais
  . Abreviações
  . defl
  . y0, y1, y2... y<n-1>

- Modificando as cabeças das notas globalmente
%%endtext


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! INFORMAÇÃO GERAL  !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%newpage 1
%%footer "$D	$P	$V"

X:1
%%topspace -30
%%continueall
K:C
%%textfont Times-Roman 30
%%center Criação de novos símbolos em abcm2ps
%%textfont Times-Roman 15
%%center Hudson Lacerda (2004-2006)

%%vskip 24pt

%%center $4(Re)definição de operadores PostScript

%%begintext justify

O gerador de partituras $2abcm2ps$0 ($3<http://moinejf.free.fr/>$0)
permite a criação e modificação de operadores $1PostScript$0.  Esse
recurso é muito útil na personalização das partituras, além de
viabilizar a implementação de símbolos inexistentes no programa.

Para enviar uma linha de código $1PostScript$0 para o arquivo de saída,
basta utilizar o comando $3\%\%postscript$0 no arquivo $2ABC$0.

O exemplo abaixo altera a espessura das linhas, redefinindo o operador
$3dlw$0 gerado por $2abcm2ps$0:

$3\%\%postscript /dlw {2.5 setlinewidth} def
%%endtext

X:1
%%topspace -10
K:C
%%stretchlast
%%multicol start
%%multicol new
%%rightmargin 11cm
T:dlw original (0.7pt)
%%postscript /dlw{.7 setlinewidth}def
CDEF FEDC |
%%multicol new
%%leftmargin 11cm
T:dlw redefinida (2.5pt)
%%postscript /dlw{2.5 setlinewidth}def
CDEF FEDC |
%%postscript /dlw{.7 setlinewidth}def
%%multicol end


%%begintext justify
O exemplo seguinte redefine o operador $3r4$0 - que desenha a pausa de
semínima - utilizando a pausa de colcheia ($3r8$0) como base.
%%endtext
%%begintext
$3\%\%\postscript /r4{gsave translate [-1 0 0 1 0 0] concat 0 0 r8 grestore}def
%%endtext


X:3
M:2/4
L:1/4
%%postscript /r4orig /r4 load def
K:C
%%stretchlast
%%multicol start
%%multicol new
%%rightmargin 11cm
T:r4 original
%%staves (1 2)
[V:1]cd|eg|z/e/d/e/|c2|
[V:2]Cz|Gz|G,z|Cz|
%%multicol new
%%leftmargin 11cm
%%postscript /r4{gsave translate [-1 0 0 1 0 0] concat 0 0 r8 grestore}def
T:r4 redefinida (colcheia espelhada)
M:2/4
L:1/4
K:C
%%staves (1 2)
[V:1]cd|eg|z/e/d/e/|c2|
[V:2]Cz|Gz|G,z|Cz|
%%postscript /r4 /r4orig load def
%%multicol end

%%begintext justify
Pode ser bastante útil inserir um código $1PostScript$0 para desenhar
em uma posição precisa em relação a uma nota. O exemplo abaixo
possibilita a escrita de comandos em uma anotação
($1annotation$0). O texto da anotação deve começar com o caractere $3`:'$0
para que seja interpretado como um comando.
%%endtext

%%begintext
$3\%\%postscript /cp {currentpoint}!
\%\%postscript /anshow { dup 0 get (:) 0 get ne
\%\%postscript     {/gchshow load cshow}
\%\%postscript     {dup length 1 sub 1 exch getinterval cvx exec}ifelse}!
%%endtext

%%begintext justify
Incluindo-se o código acima no início de um arquivo $2ABC$0, pode-se
executar comandos como estes:
%%endtext

%%begintext
%%$3X:1
%%K:C
%%"@0,0:cp newpath 10 360 0 arcn stroke"CDEF \\
%%"@0,0:cp newpath 15 360 0 arcn stroke"GFED |\\
%%"@0,0:cp /yy exch def /xx exch def"C2 E2 \\
%%"@0,0:gsave xx yy lineto 2 setlinewidth stroke grestore"G4|

%%endtext

X:1
T:
%%continueall
% %musicspace -20
%T:Comandos em anotações
%%postscript /cp {currentpoint}!
%%postscript /xy {cp xymove cp}!
% %postscript /anshow {dup length exch dup 0 get (:) 0 get ne
% %postscript     {/gchshow load cshow pop}
% %postscript     {exch -1 add 1 exch getinterval cvx exec} ifelse}!
%%postscript	/anshow{dup 0 get (:) 0 get ne
%%postscript		{/gchshow load cshow}
%%postscript		{dup length 1 sub 1 exch getinterval cvx exec}
%%postscript		ifelse}!
K:C
"@0,0:cp newpath 10 360 0 arcn stroke"CDEF \
"@0,0:cp newpath 15 360 0 arcn stroke"GFED |\
"@0,0:cp /yy exch def /xx exch def"C2 E2 \
"@0,0:gsave xx yy lineto 2 setlinewidth stroke grestore"G4|



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! NOVOS SÍMBOLOS (DECORAÇÕES) !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%newpage
%%center $4Novos símbolos (\%\%deco)

%%begintext justify

Além das possibilidades já exemplificadas, $2abcm2ps$0 permite o
acréscimo de novas decorações (símbolos tais como acentos, dinâmicas,
articulações etc.).
Isso é feito através do comando $3\%\%deco$0. Sua sintaxe é a seguinte:

$3\%\%deco <nome> <tipo> <ps> <altura> <largE> <largD> [texto]
%%endtext

%%begintext
$3<nome>$0 é o identificador do símbolo;
$3<tipo>$0 é um número de 0 a 7 que define o tipo do símbolo;
$3<ps>$0 é o nome do operador $1PostScript$0 a ser executado;
$3<altura>$0 é o espaço ocupado verticalmente pelo símbolo, em pontos;
$3<largE>$0 e $3<largD>$0 indicam o espaço à esquerda e à direita do símbolo
              (funciona desde $2abcm2ps-4.8.2$0, somente para decorações do tipo 6);
$3[texto]$0 é um texto (opcional) a ser utilizado pelo operador $1PostScript$0
              (usado somente por decorações dos tipos 3, 4 e 6).
%%endtext


%%begintext
O $3<tipo>$0 do símbolo define seu posicionamento:

$20:$0 junto à cabeça da nota, como $3!tenuto!$0 ou $3.$0 ($1staccato$0);
$21:$0 à esquerda da cabeça da nota, como $3!slide!$0;
$22:$0 à esquerda de um acorde, como $3!arpeggio!$0;
$23, 4:$0 expressões genéricas acima e abaixo da pauta respectivamente;
$25:$0 símbolo longo acima da pauta, como $3!trill(!$0 ou $3!trill)!$0;
$26:$0 genérico (normalmente abaixo da pauta);
$27:$0 símbolo longo abaixo da pauta, como $3!crescendo(!$0 ou $3!crescendo)!$0.

%%endtext

%%begintext justify
Símbolos dos tipos 0 a 2 são associados a notas, e ficam dentro da pauta.
Tipos 3 a 5 situam-se fora da pauta, embora sejam associados a notas.
Por sua vez, os tipos 6 e 7 são associados à pauta.

Há ainda uma categoria especial de decoração: quando o $3<nome>$0
começa com $3head-$0, a decoração substitui a cabeça da nota em que
for usada.

%%endtext


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 0 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%text $4Como criar uma decoração do tipo 0
%%begintext justify
Decorações do tipo 0 situam-se junto à cabeça da nota.
Dois exemplos são $3!tenuto!$0 e $3!dot!$0.
O operador $1PostScript$0 deve utilizar dois argumentos: as coordenadas
$3<x>$0 e $3<y>$0, que determinam a posição do símbolo. O comando $3\%\%deco$0
não deve fazer uso do argumento $3[texto]$0.

Eis um exemplo (acento junto à cabeça da nota):
%%endtext

%%begintext
$3\%\%postscript /exemplo0 {  moveto              \% Uso: x y exemplo0 -
\%\%postscript              -3 -2 rmoveto
\%\%postscript               6  2 rlineto
\%\%postscript              -6  2 rlineto
\%\%postscript              1 setlinewidth stroke dlw
\%\%postscript           } def
%%
\%\%deco ex0 0 exemplo0 6 0 0
%%
%%X:1
%%K:C
%%!ex0!DEFG !ex0!ABcd | GAB!ex0!c def!ex0!g |
%%endtext

% %postscript /exemplo0 {2 0 360 arc fill} def

X:1
%%postscript /exemplo0{moveto -3 -2 rmoveto 6 2 rlineto -6 2 rlineto
%%postscript 1 setlinewidth stroke dlw}def
%%deco ex0 0 exemplo0 6 0 0
% %musicspace -20
K:C
!ex0!DEFG !ex0!ABcd | GAB!ex0!c def!ex0!g |


%%newpage


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 1 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%text $4Como criar uma decoração do tipo 1
%%begintext justify
Decorações do tipo 1 situam-se à esquerda da cabeça da nota.
Um exemplo é $3!slide!$0.
Assim como para o tipo 0, o operador $1PostScript$0 deve utilizar
dois argumentos: as coordenadas $3<x>$0 e $3<y>$0, que determinam a
posição do símbolo. O comando $3\%\%deco$0 não deve fazer uso do
argumento $3[texto]$0. O argumento $3<altura>$0 é irrelevante,
podendo ser simplesmente zero.
Note que a posição do símbolo é afetada pela
existência de um acidente.

Eis um exemplo (meia-lua à esquerda da nota):
%%endtext

%%begintext
$3\%\%postscript /exemplo1 {  newpath             \% Uso: x y exemplo1 -
\%\%postscript              exch 1 add exch
\%\%postscript              5 100 260 arc
\%\%postscript              .9 setlinewidth stroke dlw
\%\%postscript           } def
%%
\%\%deco ex1 1 exemplo1 0 0 0
%%
%%X:1
%%K:C
%%CD!ex1!^D!ex1!E ed!ex1!_d!ex1!c |
%%endtext

X:1
%%postscript /exemplo1 {  newpath
%%postscript              exch 1 add exch
%%postscript              5 100 260 arc
%%postscript              .9 setlinewidth stroke dlw
%%postscript           } def
%%
%%deco ex1 1 exemplo1 0 0 0
%%
%%continueall
% %musicspace -20
K:C
CD!ex1!^D!ex1!E ed!ex1!_d!ex1!c |


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 2 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%vskip 24pt
%%text $4Como criar uma decoração do tipo 2
%%begintext justify
Decorações do tipo 2 situam-se à esquerda de um acorde, e possuem
altura dependente do âmbito desse acorde.
Um exemplo é $3!arpeggio!$0.

O operador $1PostScript$0 deve utilizar três argumentos: a altura
mínima do símbolo e as coordenadas horizontal e vertical do ponto mais
baixo do símbolo.

O comando $3\%\%deco$0 não deve fazer uso do argumento $3[texto]$0.  O
argumento $3<altura>$0 é utilizado para definir a altura mínima do
símbolo (desde $2abcm2ps-4.8.8$0).

A posição do símbolo é afetada pela existência de acidentes.

Eis um exemplo (colchete):
%%endtext

%%begintext
$3\%\%postscript /exemplo2 {   moveto             \% Uso: alt x y exemplo2 -
\%\%postscript               4 0 rmoveto
\%\%postscript              -4 0 rlineto 0 exch rlineto
\%\%postscript               4 0 rlineto 1.6 setlinewidth stroke dlw
\%\%postscript           } def
%%
\%\%deco ex2 2 exemplo2 6 0 0
%%
%%X:1
%%L:1/4
%%K:C
%%!ex2!C !ex2![CEG] !ex2![C_EG] !ex2![^G,=g] |\\
%%!ex2!c !ex2![ceg] !ex2![c_eg] !ex2![^G=g'] |
%%endtext

X:1
%%postscript /exemplo2 {   moveto
%%postscript               4 0 rmoveto
%%postscript              -4 0 rlineto 0 exch rlineto
%%postscript               4 0 rlineto 1.6 setlinewidth stroke dlw
%%postscript           } def
%%deco ex2 2 exemplo2 6 0 0
% %musicspace -20pt
L:1/4
K:C
!ex2!C !ex2![CEG] !ex2![C_EG] !ex2![^G,=g] |\
!ex2!c !ex2![ceg] !ex2![c_eg] !ex2![^G=g'] |


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 3 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%newpage
%%text $4Como criar uma decoração do tipo 3
%%begintext justify
Decorações do tipo 3 situam-se geralmente acima da pauta.  Alguns
exemplos são: $3!accent!$0, $3!segno!$0 e $3!mordent!$0.  O operador
$1PostScript$0 deve utilizar dois ou três argumentos: as coordenadas
horizontal e vertical e, opcionalmente, uma $1string$0 de texto (se o
comando $3\%\%deco$0 empregar o argumento $3[texto]$0).

Eis um exemplo sem $3[texto]$0 (não-acento):
%%endtext

%%begintext
$3\%\%postscript /exemplo3a {  newpath            \% Uso: x y exemplo3a -
\%\%postscript               6.5 add
\%\%postscript               5 180 360 arc
\%\%postscript               1.2 setlinewidth stroke dlw
\%\%postscript            } def
%%
\%\%deco ex3a 3 exemplo3a 8 0 0
%%
%%X:1
%%K:C
%%!ex3a!CDELF !ex3a!GLEDC | !ex3a!cdeLf !ex3a!gLedc | 
%%endtext

X:1
%%postscript /exemplo3a {  newpath
%%postscript               6.5 add
%%postscript               5 180 360 arc
%%postscript               1.2 setlinewidth stroke dlw
%%postscript            } def
%%
%%deco ex3a 3 exemplo3a 8 0 0
%%
% %musicspace -20pt
K:C
!ex3a!CDELF !ex3a!GLEDC |\ %\
!ex3a!cdeLf !ex3a!gLedc | 


%%text E a seguir um exemplo com $3[texto]$0 (indicação de corda):

%%begintext
$3\%\%postscript /exemplo3b {  4 add 2 copy       \% Uso: texto x y exemplo3b -
\%\%postscript               newpath 4 add 7 0 360 arc dlw stroke
\%\%postscript               moveto
\%\%postscript               /Helvetica-Bold 12 selectfont
\%\%postscript               showc
\%\%postscript            } def
%%
\%\%deco ex3b_E 3 exemplo3b 16 0 0 E
\%\%deco ex3b_B 3 exemplo3b 16 0 0 B
\%\%deco ex3b_G 3 exemplo3b 16 0 0 G
\%\%deco ex3b_D 3 exemplo3b 16 0 0 D
\%\%deco ex3b_A 3 exemplo3b 16 0 0 A
%%
%%X:1
%%L:1/1
%%K:C treble-8
%%!ex3b_E!e !ex3b_B!B !ex3b_G!G !ex3b_D!D !ex3b_A!A, !ex3b_E!E, |
%%endtext

X:1
%%postscript /exemplo3b { 4 add 2 copy
%%postscript               newpath 4 add 7 0 360 arc dlw stroke
%%postscript               moveto
%%postscript               /Helvetica-Bold 12 selectfont
%%postscript               showc
%%postscript            } def
%%
%%deco ex3b_E 3 exemplo3b 16 0 0 E
%%deco ex3b_B 3 exemplo3b 16 0 0 B
%%deco ex3b_G 3 exemplo3b 16 0 0 G
%%deco ex3b_D 3 exemplo3b 16 0 0 D
%%deco ex3b_A 3 exemplo3b 16 0 0 A
%%
% %musicspace -20pt
L:1/1
K:C treble-8
!ex3b_E!e !ex3b_B!B !ex3b_G!G !ex3b_D!D !ex3b_A!A, !ex3b_E!E, |


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 4 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Como criar uma decoração do tipo 4
%%begintext justify
Decorações do tipo 4 situam-se sempre abaixo da pauta.

De maneira similar aos tipos 3 e 6, o operador $1PostScript$0 deve
utilizar dois ou três argumentos: as coordenadas horizontal e vertical
e, opcionalmente, uma $1string$0 de texto (se o comando $3\%\%deco$0
empregar o argumento $3[texto]$0).

Um exemplo de aplicação é em símbolos de dinâmica próximos às
notas (ao invés de serem alinhados horizontalmente). O operador $3pf$0
de $2abcm2ps$0 (próprio para imprimir símbolos de dinâmica) é
aproveitado no exemplo. (Veja também ``Como criar uma decoração do tipo 6''.)

%%endtext

%%begintext
$3\%\%deco ex4a 4 pf 18 0 0 p
%%
%%X:1
%%K:C treble
%%!ex4a!E,Gd!ex4a!f' |
%%endtext

X:1
%%deco ex4a 4 pf 18 0 0 p
%%continueall
% %musicspace -20pt
K:C treble
!ex4a!E,Gd!ex4a!f' |

%%begintext justify
Outra aplicação de decoração do tipo 4 é o desenho de barras de
compasso, útil para escrita de música polimétrica.
%%endtext

%%begintext
$3\%\%postscript /exemplo4b{2 add M 0 24 RL dlw stroke}def
\%\%deco ex4b 4 exemplo4b 0 0 0
%%endtext

%%begintext
%%$3U: I = !ex4b!      \% Usa `I' como abreviação para `!ex4b!'
%%
%%X:1
%%M:none
%%K:none
%%V:1
%%[M:3/4][L:1/4] z/  Iy  cde Iy  fed  Iy  \\
%%[M:2/4]        gf  Iy  ed  Iy  cB || [M:6/8] c3 |]
%%V:2
%%[M:5/8] [L:1/8]  CDEFE  Iy  DGFED  Iy  CB,C3  Iy  \\
%%[M:5/16][L:1/16] CDEFE  Iy  DGFED  Iy  CB,C3  Iy  z5 || [M:6/8] C12 |]
%%endtext

%%postscript /exemplo4b{2 add M 0 24 RL dlw stroke}def
%%deco ex4b 4 exemplo4b 0 0 0
U: I = !ex4b!
X:1
M:none
K:none
V:1
[M:3/4][L:1/4] z/ Iy cde Iy fed Iy \
[M:2/4] gf Iy ed Iy cB || [M:6/8] c3 |]
V:2
[M:5/8][L:1/8] CDEFE Iy DGFED Iy CB,C3 Iy
[M:5/16][L:1/16] CDEFE Iy DGFED Iy CB,C3 Iy z5  || [M:6/8] C12 |]





%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 6 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Como criar uma decoração do tipo 6
%%begintext justify
Decorações do tipo 6 situam-se geralmente abaixo da pauta.  Exemplos
típicos são os símbolos de dinâmica, tais como: $3!p!$0, $3!mf!$0 e
$3!ff!$0.

O operador $1PostScript$0 deve utilizar necessariamente três
argumentos: as coordenadas horizontal e vertical e uma $1string$0 de
texto. O argumento $3[texto]$0 do comando $3\%\%deco$0 não pode ser
omitido.

Um exemplo simples e útil é a implementação da dinâmica $1mp$0 (ausente
antes de abcm2ps-4.11.5).  O operador $3pf$0 de $2abcm2ps$0 é
usado no exemplo. Note que as decorações do tipo 6 são alinhadas
horizontalmente (diferentemente do tipo 4).
%%endtext

%%begintext
$3\%\%deco ex6 6 pf 18 10 8 mp
%%
%%X:1
%%K:C treble
%%!ex6!E,Gd!ex6!f' |
%%endtext

X:1
%%deco ex6 6 pf 18 10 8 mp
%%continueall
% %musicspace -20pt
K:C treble
!ex6!E,Gd!ex6!f' |


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 5 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Como criar uma decoração do tipo 5
%%begintext justify
Decorações do tipo 5 são sinais longos que situam-se acima da
pauta. Um exemplo é o trinado longo, iniciado com $3!trill(!$0 e
terminado com $3!trill)!$0.

Na decoração que inicia o símbolo, o campo $3<ps>$0 do comando
$3\%\%deco$0 deve ser $3`-'$0 (indicando que nenhum operador
$1PostScript$0 será utilizado). O $3<nome>$0 da decoração inicial deve
terminar com o caractere $3`('$0, e o da decoração final com $3`)'$0.

O operador $1PostScript$0 da decoração final é responsável pelo desenho,
e recebe três argumentos: a largura do símbolo e as coordenadas
horizontal e vertical do ínicio do símbolo.

Eis um exemplo (indicação de oitava acima):
%%endtext

%%begintext
$3\%\%postscript /exemplo5 {                      \% Uso: larg x y exemplo5 -
\%\%postscript              moveto -3 2 rmoveto
\%\%postscript              /Times-BoldItalic 12 selectfont (8) show
\%\%postscript              gsave
\%\%postscript                 2 6 rmoveto
\%\%postscript                 [3] 0 setdash 12 add 0 rlineto
\%\%postscript                 currentpoint dlw stroke
\%\%postscript                 moveto [] 0 setdash 0 -3 rlineto stroke
\%\%postscript              grestore
\%\%postscript           } def
%%endtext
%%begintext
$3\%\%deco ex5( 5 - 10 0 0
\%\%deco ex5) 5 exemplo5 10 0 0
%%
%%X:1
%%K:C
%%cdefgab!ex5(!cdefgab!ex5)!c' |
%%endtext

X:1
%%postscript /exemplo5 {
%%postscript              moveto -3 2 rmoveto
%%postscript              /Times-BoldItalic 12 selectfont (8) show
%%postscript              gsave
%%postscript                 2 6 rmoveto dlw
%%postscript                 [3] 0 setdash 12 add 0 rlineto currentpoint stroke
%%postscript                 moveto [] 0 setdash 0 -3 rlineto stroke
%%postscript              grestore
%%postscript           } def
%%
%%deco ex5( 5 - 10 0 0
%%deco ex5) 5 exemplo5 10 0 0
%%
% %musicspace -20pt
K:C
%V:1 down
cdefgab!ex5(!cdefgab!ex5)!c' |


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO 7 !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Como criar uma decoração do tipo 7
%%begintext justify
Decorações do tipo 7 são sinais longos que situam-se abaixo da
pauta, como os sinais de dinâmica $3!crescendo(!$0, $3!crescendo)!$0,
$3!diminuendo(!$0 e $3!diminuendo)!$0.

São criadas da mesma maneira que as decorações do tipo 5, com a diferença
que as do tipo 7 são impressas abaixo da pauta.

Eis um exemplo (indicação de oitava abaixo):
%%endtext

%%begintext
$3\%\%postscript /exemplo7 {                      \% Uso: larg x y exemplo7 -
\%\%postscript              moveto -6 0 rmoveto
\%\%postscript              /Times-BoldItalic 12 selectfont (8 bassa) show
\%\%postscript              gsave
\%\%postscript                 2 2 rmoveto
\%\%postscript                 [3] 0 setdash 22 sub 0 rlineto
\%\%postscript                 currentpoint dlw stroke
\%\%postscript                 moveto [] 0 setdash 0 3 rlineto stroke
\%\%postscript              grestore
\%\%postscript           } def
%%endtext
%%begintext
$3\%\%deco ex7( 7 - 10 0 0
\%\%deco ex7) 7 exemplo7 10 0 0
%%
%%X:1
%%K:C
%%cBAGFED!ex7(!cBAGFED!ex7)!C |
%%endtext

X:1
%%postscript /exemplo7 {
%%postscript              moveto -6 0 rmoveto
%%postscript              /Times-BoldItalic 12 selectfont (8 bassa) show
%%postscript              gsave
%%postscript                 2 2 rmoveto dlw
%%postscript                 [3] 0 setdash 22 sub 0 rlineto currentpoint stroke
%%postscript                 moveto [] 0 setdash 0 3 rlineto stroke
%%postscript              grestore
%%postscript           } def
%%
%%deco ex7( 7 - 10 0 0
%%deco ex7) 7 exemplo7 10 0 0
%%
% %musicspace -20pt
K:C treble
% %exprabove
cBAGFED!ex7(!cBAGFED!ex7)!C |



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! TIPO `head-xxx': CABEÇAS DE NOTAS !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Como criar uma decoração head-xxx (cabeça de nota)
%%begintext justify
Uma decoração cujo $3<nome>$0 começa com $3head-$0 substitui a cabeça
da nota em que é usada. Decorações $3head-xxx$0 são declaradas como sendo de
qualquer um dos tipos 0-7, usando os parâmetros apropriados ao tipo declarado.

Alguns exemplos úteis são as cabeças de nota em forma de losango
(harmônico), em forma de $3x$0 (percussão) e invisíveis (notas sem
cabeça). Neste exemplo, o $3x$0 é na verdade um $1dobrado sustenido$0
(desenhado pelo operador $1PostScript$0 $3dsh0$0, gerado por
$2abcm2ps$0). Note ainda o efeito de uma decoração $3head-xxx$0 em um
acorde: ela se aplica a todas as suas notas.

Veja também a seção ``Modificando as cabeças das notas globalmente''.
%%endtext

%%begintext
$3\%\%postscript /harm{gsave T 40 rotate          \% Uso: x y harm -
\%\%postscript 	           .25 dup setlinewidth
\%\%postscript 	           -3 2.3 3 -1 roll 2 div sub M 6 0 RL
\%\%postscript 	           0 -4.6 RM                   -6 0 RL stroke
\%\%postscript             1.4 dup setlinewidth
\%\%postscript 	           3 1 index 2 div sub 2.3 M 0 -4.6 RL
\%\%postscript             -6 add 0 RM               0  4.6 RL stroke
\%\%postscript       grestore}!
\%\%postscript /pop2{pop pop}!
%%endtext
%%begintext
$3\%\%deco head-h 0 harm 0 0 0
\%\%deco head-x 0 dsh0 0 0 0
\%\%deco head-i 0 pop2 0 0 0
%%endtext
%%begintext
%%$3X:1
%%K:C
%%!head-x!B!head-h! G!head-x!D[Ce] - [C!head-i!^Ae]2 !head-h![gbe']2 |
%%endtext

X:1
K:C
%%continueall 1
% %postscript /harm{M -3 0 RM 3 3 RL 3 -3 RL -3 -3 RL closepath stroke}!
%%postscript /harm{gsave T 40 rotate
%%postscript 		.25 dup setlinewidth
%%postscript 		-3 2.3 3 -1 roll 2 div sub M 6 0 RL
%%postscript 		0 -4.6 RM                   -6 0 RL
%%postscript 		stroke
%%postscript 		1.4 dup setlinewidth
%%postscript 		3 1 index 2 div sub 2.3 M 0 -4.6 RL
%%postscript 		-6 add 0 RM               0  4.6 RL
%%postscript 		stroke
%%postscript       grestore}!
%%postscript /pop2{pop pop}!
%%deco head-h 0 harm 0 0 0
%%deco head-x 0 dsh0 0 0 0
%%deco head-i 0 pop2 0 0 0
!head-x!B!head-h!G !head-x!D[Ce] - [C!head-i!^Ae]2 !head-h![gbe']2 |



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! DECORAÇÕES EM NOTAS INDIVIDUAIS DE ACORDES !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% %newpage
%%vskip 24pt
%%text $4Decorações em notas individuais de acordes
%%begintext justify
Uma decoração pode ser usada em uma nota específica pertencente a um
acorde ($1i.e.$0 uma nota contida entre $3`['$0 e $3`]'$0). Nesse
caso, uma decoração comum pode ficar em uma posição inadequada. Então
deve-se utilizar um operador $1PostScript$0 (e uma decoração) especial
para uso em nota individual de acorde.

Como primeiro exemplo, um mordente (baseado no operador $3lmrd$0 de
$2abcm2ps$0) que é posicionado à esquerda de uma cabeça de nota.  Ele
foi declarado como uma decoração tipo 1 para reservar um pouco de
espaço à esquerda.
%%endtext

%%begintext
$3\%\%postscript /morde{exch 11 sub exch 4 sub lmrd}!
$3\%\%deco morde 1 morde 0 0 0
%%endtext
%%begintext
%%$3X:1
%%K:C
%%[CG!morde!ce]2 [G,GBd]2 [A,E!morde!Ac]4 |
%%endtext

X:1
%%postscript /morde{exch 11 sub exch 4 sub lmrd}!
%%deco morde 1 morde 0 0 0
K:C
%%continueall 1
[CG!morde!ce]2 [G,GBd]2 [A,E!morde!Ac]4 |



%%begintext justify
E a seguir, ligaduras abertas que indicam "$1laissez vibrer$0".
%%endtext

%%begintext
$3\%\%postscript /lv { gsave T (')eq{1 -1 scale}if -90 rotate 3 7 M
\%\%postscript       /Times-Roman 12 selectfont (\\)) show grestore } !
$3\%\%deco lv' 3 lv 0 0 0 '
\%\%deco lv, 3 lv 0 0 0 ,
%%endtext
%%begintext
%%$3X:1
%%K:C treble-8
%%z2 [!lv'!e]/[!lv,!^F]/[!lv'!=f]/[!lv,!G]/ z2 .[^G,A,] z |
%%endtext

X:1
%%continueall
K:C treble-8
%%postscript /lv { gsave T (')eq{1 -1 scale}if -90 rotate 3 7 M
%%postscript           /Times-Roman 12 selectfont (\)) show
%%postscript       grestore} !
%%deco lv' 3 lv 0 0 0 '
%%deco lv, 3 lv 0 0 0 ,
z2 [!lv'!e]/[!lv,!^F]/[!lv'!=f]/[!lv,!G]/ z2 .[^G,A,] z |



%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! ACIDENTES MICROTONAIS !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%newpage
% %vskip 24pt
%%center $4Acidentes microtonais
%%begintext justify

Desde a versão 4.3.2, $2abcm2ps$0 permite o uso de acidentes especiais
para microtonalismo.  Alturas microtonais são indicadas por uma fração
depois de um acidente, como $3^3/4c$0. Por $1default$0, o numerador é
definido como 1 e o denominador como 2 ($3^/c$0 é o mesmo que
$3^1/2c$0). O numerador e o denominador devem ser números inteiros de
1 a 256.

$2abcm2ps$0 inclui sustenidos e bemóis 1/2 e 3/2 (para quartos de
tom). Para outros valores, novos operadores $1PostScript$0 devem ser
definidos (através de $3\%\%postscript$0). O nome de um operador
$1PostScript$0 para acidente deve ser:
%%endtext
%%begintext obeylines
$3<accidental_type><micro_value>$0
%%endtext
%%begintext justify
onde $3<accidental_type>$0 deve ser: $3sh$0 (sustenido), $3ft$0
(bemol), $3nt$0 (bequadro), $3dsh$0 (dobrado sustenido) ou $3dft$0
(dobrado bemol).

$3<micro_value>$0 deve ser um número computado da fração como:

$2(numerador-1)*256 + (denominador-1)$0.
%%endtext
%%begintext justify
No exemplo a seguir, a primeira linha de música utiliza os acidentes
disponíveis em $2abcm2ps$0.  A segunda linha utiliza acidentes
alternativos, constituídos de um sustenido ou bemol com uma seta. No
código $2ABC$0 desse exemplo, um acidente com $39/$0 (ou $39/2$0) usa
seta para cima, e um acidente com $36/$0 (ou $36/2$0) usa seta para
baixo.

Note os valores de $3<micro_value>$0 nos nomes dos operadores
$1PostScript$0, calculados para as frações $39/2$0 e $36/2$0:

$2($39$2-1)*256 + ($32$2-1) = $32049$2

($36$2-1)*256 + ($32$2-1) = $31281$0

Eis o código:
%%endtext

%%begintext
$3\%\%postscript /seta {M 1.7 -7 RL -3.4 0 RL fill}!
\%\%postscript /sh2049 {2 copy sh0 exch 1.5 add exch 15 add seta}! \% ^9/2
\%\%postscript /sh1281 {2 copy sh0 exch 1.2 sub exch 15 sub        \% ^6/2
\%\%postscript          gsave T 180 rotate 0 0 seta grestore}!
\%\%postscript /ft2049 {2 copy ft0 exch 1.8 sub exch 14 add seta}! \% _9/2
\%\%postscript /ft1281 {2 copy ft0 exch 1.8 sub exch 11 sub        \% _6/2
\%\%postscript          gsave T 180 rotate 0 0 seta grestore}!
%%endtext
%%begintext
%%$3X:1
%%M:none
%%L:1/2
%%K:C
%%=C  ^/C ^C ^3/C =D  _/D _D _3/D =C |
%%=C ^6/C ^C ^9/C =D _9/D _D _6/D =C |
%%endtext

X:1
%%postscript /seta{M 1.7 -7 RL -3.4 0 RL fill}!
%%postscript /sh2049{2 copy sh0 exch 1.5 add exch 15 add seta}! % ^9/2
%%postscript /sh1281{2 copy sh0 exch 1.2 sub exch 15 sub
%%postscript         gsave T 180 rotate 0 0 seta grestore}! % ^6/2
%%postscript /ft2049{2 copy ft0 exch 1.8 sub exch 14 add seta}! % _9/2
%%postscript /ft1281{2 copy ft0 exch 1.8 sub exch 11 sub
%%postscript         gsave T 180 rotate 0 0 seta grestore}! % _6/2
M:none
L:1/2
K:C
=C  ^/C ^C ^3/C =D  _/D _D _3/D =C |
=C ^6/C ^C ^9/C =D _9/D _D _6/D =C |




%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! ALGUNS OPERADORES ESPECIAIS !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%newpage
% %vskip 24pt
%%center $4Alguns operadores especiais
%%begintext justify

O código $1PostScript$0 gerado por $2abcm2ps$0 implementa diversos
operadores úteis na escrita de extensões ($3\%\%deco /
\%\%postscript$0). Merecem destaque: abreviações para comandos
$1PostScript$0, o sinalizador $3defl$0 e os auxiliares de
posicionamento $3y<N>$0.
%%endtext
%%vskip 24pt
%%text $4Abreviações
%%begintext justify
$2abcm2ps$0 gera as seguintes abreviações para comandos da linguagem
$1PostScript$0:
%%endtext
%%begintext obeylines
$3!      bind def
T      translate
M      moveto
RM     rmoveto
RL     rlineto
RC     rcurveto
SLW    setlinewidth $0($2abcm2ps-4.8.3$0)
%%endtext
% omitido: bdef   bind def

%%vskip 24pt
%%text $4defl
%%begintext justify
O operador $3defl$0 (introduzido com $2abcm2ps-4.8.0$0) sinaliza:
%%endtext
%%begintext obeylines
- o estado de uma decoração de tipo 5 ou 7 (início ou final);
- a direção da haste da nota (para cima ou para baixo).
%%endtext
%%begintext justify
Ele é gerado/atualizado para cada nota que contenha uma decoração.

Para utilizá-lo, a partir de $2abcm2ps-4.9.4$0, é necessário acionar o
comando $3\%\%setdefl true$0.
%%endtext
%%begintext justify
O primeiro bit à direita em $3defl$0 indica se uma decoração longa
está começando ($30$0) ou se é uma continuação ($31$0) (refere-se à
extremidade esquerda da decoração);

O segundo bit a partir da direita indica se uma decoração longa está
terminando ($30$0) ou se ficará por continuar na próxima linha ($31$0)
(refere-se à extremidade direita da decoração);

O terceiro bit a partir da direita indica se a haste da nota está para
baixo ($30$0) ou para cima ($31$0). É útil para criar um decoração
dependente da direção da haste (por exemplo, a ser desenhada na
própria haste).
%%endtext
%%begintext justify
Assim, para verificar o estado do primeiro bit (extremidade esquerda
de decoração longa) pode-se usar uma seqüência $1PostScript$0 com a
seguinte estrutura:
%%endtext
%%begintext obeylines
$3defl 1 and 0 eq {
    \% procedimento caso ponta esquerda seja início
}{
    \% procedimento caso ponta esquerda seja continuação
} ifelse$0

Para verificar o segundo bit (extremidade direita de decoração longa):

$3defl 2 and 0 eq {
    \% procedimento caso ponta direita seja final
}{
    \% procedimento caso ponta direita seja a continuar
} ifelse$0

E para verificar o terceiro bit (direção da haste):

$3defl 4 and 0 eq {
    \% procedimento caso haste seja para baixo
}{
    \% procedimento caso haste seja para cima
} ifelse
%%endtext

% %vskip 24pt
%%text $2Exemplos:
%%begintext justify
O exemplo abaixo utiliza $3defl$0 para determinar onde está a haste de
modo a nela desenhar um $3x$0 ($1sprechgesang$0).

A decoração é declarada como de tipo 1 porque sua posição é sempre
relativa à cabeça da nota. Como efeito colateral, $2abcm2ps$0 deixa
um espaço extra à esquerda da nota (onde seria normalmente desenhado
um tal tipo de decoração). Caso esse espaço seja indesejável, pode-se
declarar um tipo 0 (ou 3) e sempre usar a decoração (juntamente com a
nota) entre colchetes, como num acorde.
%%endtext

%%begintext obeylines
$3\%\%setdefl true
\%\%postscript /sprgsg{gsave T
\%\%postscript         defl 4 and 0 eq{1.5 -9}{8.5 9}ifelse T
\%\%postscript         .8 dup scale 0 0 dsh0 grestore}!

\%\%deco sprgsg 1 sprgsg 0 0 0
%%endtext

%%begintext obeylines
%%$3X:1
%%K:C
%%z4 !sprgsg!C !sprgsg!E !sprgsg!G2 | !sprgsg!c4 z4 |]
%%endtext

X:1
%%continueall
%%setdefl true
%%postscript /defl 0 def
%%postscript /sprgsg{gsave T defl 4 and 0 eq{1.5 -9}{8.5 9}ifelse T
%%postscript         .8 dup scale 0 0 dsh0 grestore}!
%%deco sprgsg 1 sprgsg 0 0 0
K:C
z4 !sprgsg!C !sprgsg!E !sprgsg!G2 | !sprgsg!c4 z4 |]

%%begintext justify
No seguinte exemplo é implementado um colchete abaixo da pauta (que
pode ser usado para indicações de pedal de piano). O início e o final
dessa decoração longa são reconhecidos graças ao operador $3defl$0.
Observe (na partitura) que o colchete que começa no último compasso da
primeira linha fica `aberto', assim como o lado esquerdo de sua
continuação na linha seguinte.

A primeira linha do código $1PostScript$0 define o operador $3defl$0
com zeros. Isso é totalmente desnecessário (e sem efeito) com
$2abcm2ps-4.8.0$0 ou mais recente, mas torna o código compatível com
versões anteriores.  Ao usar uma versão anterior, a decoração sempre
será desenhada com início e fim.

Outra observação é que as decorações de tipos 6 e 7 são normalmente
usadas para sinais de dinâmica, portanto alinhadas na horizontal. Para
evitar conflito com esses sinais, a indicação de pedal do exemplo
seguinte é desenhada abaixo do espaço vertical a ela reservado. Em
conseqüência, podem ocorrer colisões com elementos da pauta
seguinte. A solução é aumentar a distância entre as pautas, com
$3\%\%staffsep$0 e/ou $3\%\%sysstaffsep$0.
%%endtext

%%begintext
%%$3\%\%setdefl 1
\%\%postscript /defl 0 def
\%\%postscript /colchete { -6 add exch 3 sub exch .9 setlinewidth
\%\%postscript             defl 1 and 0 eq{6 add M 0 -6 RL}{M}ifelse
\%\%postscript             7 add 6 RL
\%\%postscript             defl 2 and 0 eq{0 -6 RL}if
\%\%postscript             stroke dlw}!
%%endtext
%%begintext
%%$3\%\%deco colchete( 7 - 2 0 0
\%\%deco colchete) 7 colchete 2 0 0
%%endtext
%%begintext
%%$3X:1
\%\%staffsep 80pt          \% bastante espaço entre as pautas
%%K:Am clef=treble-8
%%\%
%%!colchete(!!mf!A,CE!colchete)!A !colchete(!cea!colchete)!c' |\\
%%!colchete(!e'a'e'c' aecA |\\
%%!colchete)! !colchete(! FA,CF Acfa  |  c'f'c'a fcAF  !colchete)! |\\
%%!colchete(! DFAd fad'af  |
%%\%
%%dafd AFDA,  !colchete)! !colchete(! |\\
%%E,B,E^G Be^gb  |  !colchete)! !colchete(! e'b'e'b eBEE,  |\\
%%A,EAc eac'e'  |  !colchete)! a'2 z2 z4  |]
%%endtext

X:1
%%setdefl 1
%%postscript /defl 0 def
%%postscript /colchete { -6 add exch 3 sub exch .9 setlinewidth
%%postscript             defl 1 and 0 eq{6 add M 0 -6 RL}{M}ifelse
%%postscript             7 add 6 RL
%%postscript             defl 2 and 0 eq{0 -6 RL}if
%%postscript             stroke dlw}!
%%deco colchete( 7 - 2 0 0
%%deco colchete) 7 colchete 2 0 0
%%staffsep 80pt
K:Am clef=treble-8
V:1
!colchete(!!mf!A,CE!colchete)!A !colchete(!cea!colchete)!c'|\
!colchete(!e'a'e'c' aecA | \
!colchete)!!colchete(!FA,CF Acfa | c'f'c'a fcAF !colchete)!| \
!colchete(!DFAd fad'af |
dafd AFDA, !colchete)!!colchete(!| \
E,B,E^G Be^gb | !colchete)!!colchete(!e'b'e'b eBEE, | \
A,EAc eac'e' | !colchete)!a'2 z2 z4 |]

%%begintext justify
Os mesmos princípios do exemplo acima poderiam ser aplicados para
aprimorar os exemplos de decorações tipos 5 e 7 dados anteriormente
(linhas de oitava acima e abaixo).
%%endtext



%%vskip 24pt
% %text $4Alguns operadores especiais
% %vskip 24pt
%%text $4y0, y1, y2... y<n-1>
%%begintext justify
$2abcm2ps-4.8.6(?)$0 introduz os operadores $3y0$0, $3y1$0,
$3y2$0... $3y<n-1>$0, que auxiliam no posicionamento de símbolos em
relação às pautas. Para todo sistema de pautas da música, $2abcm2ps$0
define um operador $3y<N>$0 associado a cada pauta ($3y0$0 para a
superior, $3y1$0 para a segunda e assim por diante até $3y<n-1>$0 para
a $3n$0-ésima pauta). As definições são como esta:

$3/y0{-47.0 add}def$0

Quando executados, esses operadores $1PostScript$0 adicionam ao valor
do topo da pilha a distância vertical entre o eixo $1x$0 e a primeira
linha da respectiva pauta.

A implementação de certas decorações pode tirar proveito dos
operadores $3y<N>$0. Por exemplo, a indicação de $1cesura$0 deve ter seu
posicionamento vertical fixo em relação à pauta, sem sofrer influência
da posição das notas como ocorre com outras decorações.

No exemplo abaixo, a posição vertical original da decoração é descartada
($3pop$0), sendo substituída pela posição da quarta linha da pauta,
situada 18 pontos acima da primeira linha ($318\000y0$0).
%%endtext

%%begintext obeylines
$3\%\%postscript /caesura0 { pop 18 y0 M
\%\%postscript             12 0 RM 3 12 RL 3 0 RM -3 -12 RL
\%\%postscript             dlw stroke }!

\%\%deco caesura0 3 caesura0 0 0 0
%%endtext
%%begintext obeylines
%%$3X:1
%%K:Am
%%[V:1 treble] (3A2B2c2 !caesura0!Lf4 |
%%[V:2 bass]   (3A2B2c2 !caesura0!Lf4 |
%%endtext

X:1
%%continueall
%%postscript /caesura0{
%%postscript     pop 18 y0 M 12 0 RM 3 12 RL 3 0 RM -3 -12 RL dlw stroke}!
%%deco caesura0 3 caesura0 0 0 0
K:Am
[V:1 treble] (3A2B2c2 !caesura0!Lf4 |
[V:2 bass]   (3A2B2c2 !caesura0!Lf4 |

%%begintext justify
Útil para músicas a uma voz, a $1cesura$0 definida acima não
aparece na pauta inferior (voz 2), já que utiliza apenas o operador
$3y0$0. (Substituir $3y0$0 por $3y1$0 colocará as decorações na outra
pauta.)

Para criar decorações mais genéricas usando $3y<N>$0 será necessário
identificar a qual pauta a decoração está associada. O código a seguir
permite identificar a pauta mais próxima à posição vertical $1y$0
associada à decoração.
%%endtext

%%begintext obeylines
$3\% ! RECURSOS PARA ADIVINHAR PENTAGRAMA (STAFF GUESSING RESOURCES) !

\% Suporte para até seis pautas (Up to 6 staves support)

\%\%postscript /y0{10000 sub}!
\%\%postscript /y1{10000 sub}!
\%\%postscript /y2{10000 sub}!
\%\%postscript /y3{10000 sub}!
\%\%postscript /y4{10000 sub}!
\%\%postscript /y5{10000 sub}!

%%endtext
%%begintext obeylines
$3\% Retorna altura da primeira linha da pauta mais próxima
\% Return vertical offset of the nearest staff

\%\%postscript /staff_y_offset { \% stack:  y  ->  y'
\%\%postscript     dm_guess_staff dm_y_offset} !
%%endtext
%%begintext obeylines
$3\% Encontra pauta mais próxima e retorna o índice da pauta
\% Find nearest staff

\%\%postscript /dm_guess_staff{ \% stack:  y  ->  index
\%\%postscript     dup 12 sub neg y0 abs exch \% y y0-midstaff y
\%\%postscript     dup 12 sub neg y1 abs exch \% y y0-midstaff y1-midstaff y
\%\%postscript     dup 12 sub neg y2 abs exch
\%\%postscript     dup 12 sub neg y3 abs exch
\%\%postscript     dup 12 sub neg y4 abs exch
\%\%postscript         12 sub neg y5 abs      \% y0..y5-midstaff
\%\%postscript     4 dict begin
\%\%postscript         /dm_i 6 def \% max number of staves
\%\%postscript         /dm_min 10000 def
\%\%postscript         /min_ {2 copy gt {exch} if pop}!
\%\%postscript         dm_i {
\%\%postscript            /dm_temp exch def dm_min dm_temp min_ dm_temp eq{
\%\%postscript               /dm_i dm_i 1 sub def/dm_min dm_temp def}if
\%\%postscript         } repeat dm_i
\%\%postscript     end
\%\%postscript }bind def
%%endtext
%%begintext obeylines
$3\% Obtém offset de y<N>
\% Get offset of y<N>

\%\%postscript /dm_y_offset { \% stack:  staff-index  ->  y-offset
\%\%postscript     dup 0 eq {pop 0 y0} {
\%\%postscript        dup 1 eq {pop 0 y1} {
\%\%postscript           dup 2 eq {pop 0 y2} {
\%\%postscript              dup 3 eq {pop 0 y3} {
\%\%postscript                  dup 4 eq {pop 0 y4} {
\%\%postscript                      5 eq {0 y5} {0} ifelse
\%\%postscript                  } ifelse
\%\%postscript              } ifelse
\%\%postscript           } ifelse
\%\%postscript        } ifelse
\%\%postscript     } ifelse
\%\%postscript }bind def
%%endtext

% ! RECURSOS PARA ADIVINHAR PENTAGRAMA (GUESS STAFF RESOURCES) !
% Suporte para até seis pautas (Up 6 staves support)
%%postscript /y0{10000 sub}!
%%postscript /y1{10000 sub}!
%%postscript /y2{10000 sub}!
%%postscript /y3{10000 sub}!
%%postscript /y4{10000 sub}!
%%postscript /y5{10000 sub}!
% Retorna altura da primeira linha da pauta mais próxima
% Return vertical offset of the nearest staff
%%postscript /staff_y_offset { % stack:  y  ->  y'
%%postscript     dm_guess_staff dm_y_offset} !
% Encontra pauta mais próxima e retorna o índice da pauta
% Find nearest staff
%%postscript /dm_guess_staff{ % stack:  y  ->  index
%%postscript     dup 12 sub neg y0 abs exch % y y0-midstaff y
%%postscript     dup 12 sub neg y1 abs exch % y y0-midstaff y1-midstaff y
%%postscript     dup 12 sub neg y2 abs exch
%%postscript     dup 12 sub neg y3 abs exch
%%postscript     dup 12 sub neg y4 abs exch
%%postscript         12 sub neg y5 abs      % y0..y5-midstaff
%%postscript     4 dict begin
%%postscript         /dm_i 6 def % max number of staves
%%postscript         /dm_min 10000 def
%%postscript         /min_ {2 copy gt {exch} if pop}!
%%postscript         dm_i {
%%postscript            /dm_temp exch def dm_min dm_temp min_ dm_temp eq{
%%postscript               /dm_i dm_i 1 sub def/dm_min dm_temp def}if
%%postscript         } repeat
%%postscript         dm_i
%%postscript     end
%%postscript }bind def
% Obtém offset de y<N>
% Get offset of y<N>
%%postscript /dm_y_offset { % stack:  staff-index  ->  y-offset
%%postscript     dup 0 eq {pop 0 y0} {
%%postscript        dup 1 eq {pop 0 y1} {
%%postscript           dup 2 eq {pop 0 y2} {
%%postscript              dup 3 eq {pop 0 y3} {
%%postscript                  dup 4 eq {pop 0 y4} {
%%postscript                      5 eq {0 y5} {0} ifelse
%%postscript                  } ifelse
%%postscript              } ifelse
%%postscript           } ifelse
%%postscript        } ifelse
%%postscript     } ifelse
%%postscript }bind def


%%begintext justify
Usando as definições acima, segue-se uma outra implementação de
$1cesura$0, que coloca a decoração na pauta mais próxima. (Em alguns
casos, notas em linhas suplementares e redução do número de pautas
usadas podem causar posicionamento incorreto das decorações.)
%%endtext
%
% A solução para o problema acima pode ser:
% - Definir uma região em torno do centro da pauta;
% - Comparar as distâncias começando por y0 (até y5 ou y<N>);
% - A primeira região em que y cair determinará a pauta;
% - Senão (y fora de qualquer região) a pauta mais próxima será usada.
%


%
%%begintext obeylines
$3\%\%postscript /caesura { staff_y_offset 18 add M
\%\%postscript            12 0 RM 3 12 RL 3 0 RM -3 -12 RL dlw stroke }!
\%\%deco caesura 3 caesura 0 0 0
%%endtext
%%begintext obeylines
%%$3X:1
%%K:Am
%%[V:1 treble] (3A2B2c2 !caesura!f4 |
%%[V:2 bass]   (3A2B2c2 !caesura!F4 |
%%endtext
%

X:1
%%continueall
%%postscript /caesura{
%%postscript    staff_y_offset 18 add M
%%postscript    12 0 RM 3 12 RL 3 0 RM -3 -12 RL dlw stroke}!
%%deco caesura 3 caesura 0 0 0
K:Am
[V:1 treble] (3A2B2c2 !caesura!f4 |
[V:2 bass]   (3A2B2c2 !caesura!F4 |

%%begintext justify
Outras aplicações para $3y<N>$0 incluem barras de compasso especiais
(pode-se aprimorar o exemplo4b) e seleção automática de cabeças de
notas para "dó móvel" e "$1shaped notes$0". Ou até mesmo a
identificação numérica das alturas e suas correspondentes freqüências
através dos operadores de acidentes ($3sh0$0, $3nt0$0, $3ft0$0, etc.),
como no exemplo seguinte:
%%endtext

%%begintext obeylines
$3\%\%postscript /sh0-orig/sh0 load bind def
\%\%postscript /ft0-orig/ft0 load bind def
\%\%postscript /nt0-orig/nt0 load bind def
\%\%postscript /dsh0-orig/dsh0 load bind def
\%\%postscript /dft0-orig/dft0 load bind def
%%endtext
%%begintext obeylines
$3\%\%postscript /deslocamento true def
$3\%\%postscript /calc-altura{gsave               \% Uso: incr calc-altura -
\%\%postscript     y neg y0 neg 3 div 3 add round cvi 1 sub 7 5 mul add
\%\%postscript     /altura exch def
\%\%postscript     altura 7 mod 0 eq {0} if
\%\%postscript     altura 7 mod 1 eq {2} if
\%\%postscript     altura 7 mod 2 eq {4} if
\%\%postscript     altura 7 mod 3 eq {5} if
\%\%postscript     altura 7 mod 4 eq {7} if
\%\%postscript     altura 7 mod 5 eq {9} if
\%\%postscript     altura 7 mod 6 eq {11} if
\%\%postscript     add altura 7 idiv 12 mul add dup /altura exch def
\%\%postscript     10 string cvs
\%\%postscript     x 41 y0 M /Helvetica 12 selectfont showc
\%\%postscript     /deslocamento deslocamento not def
\%\%postscript     deslocamento {x -36} {x -24} ifelse
\%\%postscript     y0 M altura mid2cps 10 mul round 10 div
\%\%postscript     10 string cvs /Helvetica 10 selectfont showc
\%\%postscript     grestore}!
\%     Observação: Os operadores `x' e `y' armazenam a posição da nota.
%%endtext
%%begintext obeylines
$3\%\%postscript /mid2cps{69 sub 440.0 2.0 3 -1 roll 12.0 div exp mul}!
%%endtext
%%begintext obeylines
$3\%\%postscript /sh0{1 calc-altura sh0-orig}!    \% sustenido
\%\%postscript /ft0{-1 calc-altura ft0-orig}!   \% bemol
\%\%postscript /nt0{0 calc-altura nt0-orig}!    \% bequadro
\%\%postscript /dsh0{2 calc-altura dsh0-orig}!  \% dobrado sustenido
\%\%postscript /dft0{-2 calc-altura dft0-orig}! \% dobrado bemol
%%
%%X:1
%%K:C
%%__C2 _C2 =C2 ^C2 ^^C2 || \\
%%=C=D=E=F=G=A=B =c=d=e=f=g=a=b=c' || ^F=G^G=A_B=B=c ||
%%
%%
%%endtext


X:1
K:C
%%postscript /sh0-orig/sh0 load bind def
%%postscript /ft0-orig/ft0 load bind def
%%postscript /nt0-orig/nt0 load bind def
%%postscript /dsh0-orig/dsh0 load bind def
%%postscript /dft0-orig/dft0 load bind def
%%postscript /deslocamento true def
%%postscript /calc-altura{gsave
%%postscript     y neg y0 neg 3 div 3 add round cvi 1 sub 7 5 mul add
%%postscript     /altura exch def
%%postscript     altura 7 mod 0 eq {0} if
%%postscript     altura 7 mod 1 eq {2} if
%%postscript     altura 7 mod 2 eq {4} if
%%postscript     altura 7 mod 3 eq {5} if
%%postscript     altura 7 mod 4 eq {7} if
%%postscript     altura 7 mod 5 eq {9} if
%%postscript     altura 7 mod 6 eq {11} if
%%postscript     add altura 7 idiv 12 mul add dup /altura exch def
%%postscript     10 string cvs
%%postscript     x 41 y0 M /Helvetica 12 selectfont showc
%%postscript     /deslocamento deslocamento not def
%%postscript     deslocamento {x -36} {x -24} ifelse
%%postscript     y0 M altura mid2cps 10 mul round 10 div
%%postscript     10 string cvs /Helvetica 10 selectfont showc
%%postscript     grestore}!
%%postscript /mid2cps{69 sub 440.0 2.0 3 -1 roll 12.0 div exp mul}!
%%postscript /sh0{1 calc-altura sh0-orig}!
%%postscript /ft0{-1 calc-altura ft0-orig}!
%%postscript /nt0{0 calc-altura nt0-orig}!
%%postscript /dsh0{2 calc-altura dsh0-orig}!
%%postscript /dft0{-2 calc-altura dft0-orig}!
%
%%vskip 10
__C2 _C2 =C2 ^C2 ^^C2 || =C=D=E=F=G=A=B =c=d=e=f=g=a=b=c' || ^F=G^G=A_B=B=c ||
%%vskip 20
%
%%postscript /sh0/sh0-orig load bind def
%%postscript /ft0/ft0-orig load bind def
%%postscript /nt0/nt0-orig load bind def
%%postscript /dsh0/dsh0-orig load bind def
%%postscript /dft0/dft0-orig load bind def




%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% % ! MODIFICANDO AS CABEÇAS DAS NOTAS GLOBALMENTE !
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%newpage
% %vskip 24pt
% %vskip 24pt
%%center $4Modificando as cabeças das notas globalmente
%%begintext justify

Em alguns casos é desejável modificar globalmente as cabeças das
notas, para `estilizar' a partitura ou criar recursos especiais.  Para
isso basta redefinir os operadores $1PostScript$0 responsáveis pelo
desenho das cabeças de notas.
%%endtext
%%begintext obeylines
Os operadores de $2abcm2ps$0 que desenham cabeças de notas são:

$3hd     $0Cabeça preta, para semínimas e notas mais curtas$3
Hd     $0Cabeça de mínima$3
HD     $0Semibreve$3
HDD    $0Breve (formato arredondado)$3
breve  $0Breve (formato quadrado)$3
longa  $0Longa$3
pshhd  $0Usada em nota com sustenido, quando a clave é $3perc $2(abcm2ps-4.4.5)$3
pfthd  $0Usada em nota com bemol, quando a clave é $3perc $2(abcm2ps-4.12.1 - $0era $3pflhd$2)$3
ghd    $0Cabeça preta para notinhas (ornamentos)$3
%%endtext
%%begintext obeylines
Podem-se ainda definir estes (que não têm código default):
%%endtext
%%begintext obeylines
$3pnthd  $0Usada em nota com bequadro, quando a clave é $3perc $2(abcm2ps-4.12.1)$3
pdshhd $0Usada em nota com dobrado sustenido, quando a clave é $3perc $2(abcm2ps-4.12.1)$3
pdfthd $0Usada em nota com dobrado bemol, quando a clave é $3perc $2(abcm2ps-4.12.1)$3
%%endtext
%%begintext obeylines
Pausas são realizadas por:$3

r00    $0Pausa de longa$3
r0     $0Pausa de breve$3
r1     $0Pausa de semibreve$3
r2     $0Pausa de mínima$3
r4     $0Pausa de semínima$3
r8     $0Pausa de colcheia$3
r16    $0Pausa de semicolcheia$3
r32    $0Pausa de fusa$3
r64    $0Pausa de semifusa$3
r128   $0Pausa de quartifusa (também chamada trifusa)$3
%%endtext

%r8e     $0Elemento componente de pausas de colcheia e mais curtas$3

%%begintext justify
$1É importante observar que$0 todos esses operadores armazenam a
posição da nota ou pausa como $3x$0 e $3y$0. Eles são usados para
posicionar outros símbolos, como hastes e pontos de aumento.  Isso
implica que, para escrever outras versões de cabeças de notas ou
pausas, $1é imperativo definir $3x$1 e $3y$0.
Há dois modos de fazer isso:

(1) Utilizar o operador $3xymove$0 de $2abcm2ps$0, que move para o
ponto especificado e salva suas coordenadas como $3x$0 e $3y$0.

(2) Definir $3x$0 e $3y$0 `manualmente', caso não se deseje realizar
nenhum movimento. Isso pode ser realizado com:

(2.a) $3 /y exch def /x exch def$0

(que pega os dois valores do topo da pilha e os salva como $3x$0 e $3y$0);

ou com:

(2.b) $3 /x 2 index def /y 1 index def$0

(que salva os dois valores do topo da pilha $1sem deletá-los$0).
%%endtext

%%begintext justify
Eis um exemplo de redefinição de cabeça de nota para desenhar um
contorno melódico:
%%endtext

%%begintext obeylines
$3\%\%postscript /hdo/hd load bind def     \% guarda cópia de `hd' original
\%\%postscript /xx 10000 def /yy 0 def   \% inicializa `nota anterior'
\%\%postscript /hd { xymove              \% liga à nota anterior (esquerda)
\%\%postscript 	     x xx gt {xx yy M x y lineto stroke} if
\%\%postscript 	     /xx x def /yy y def}!
%%endtext

%%newpage
%%begintext obeylines
%%$3X:1
%%L:1/8
%%M:none
%%K:C clef=perc stafflines=1  \% (stafflines foi introduzido com abcm2ps-4.8.6)
%%[M:4/4] AFgG, ad'be' | [M:7/16] c''/a/e/b/ C/B/A/ | [M:3/8] E,3 |
%%\%\%postscript /hd/hdo load bind def     \% restaura `hd' original
%%endtext

X:1
L:1/8
M:none
K:C clef=perc stafflines=1  % (stafflines foi introduzido com abcm2ps-4.8.6)
%%continueall 0
%%postscript /hdo/hd load bind def % guarda cópia de `hd' original
%%postscript /xx 10000 def /yy 0 def % inicializa
%%postscript /hd { xymove % une esta nota à nota da esquerda
%%postscript 	   x xx gt {xx yy M x y lineto stroke}if
%%postscript 	   /xx x def /yy y def}!
[M:4/4] AFgG, ad'be' | [M:7/16] c''/a/e/b/ C/B/A/ | [M:3/8] E,3 |
%%postscript /hd/hdo load bind def


% %begintext justify
% %endtext




%%vskip 20pt
%%begintext
%%$1Copyright (C) 2004-2006 Hudson Lacerda
%%This document is released under the terms of the GNU General Public License, Version 2.
%%Este documento é distribuído segundo os termos da Licença Pública Geral do GNU, Versão 2.
%%endtext



%%vskip 30pt

X:0
%%continueall
K:none
%%lineskipfac 0.5
%%center $2- - A FAZER: - -$0
%%text
% %text $3- OPERADORES dlsym, y0, y1 etc.
% %text $3- OPERADORES defl (SINAIS DE DINÂMICA LONGOS/HASTES), y0, y1 etc.
% %text $3- DECORAÇÕES EM NOTAS INDIVIDUAIS DE ACORDES
% %text $3- COMO MUDAR AS CABEÇAS DAS NOTAS (!head-x!)
%%text $3- ORDEM DE EXECUÇÃO DAS DECORAÇÕES:
%%text $3    (!head-x! e [!deco!c] por voz, !deco! por tempo)
% %text $3- COMO MUDAR AS CABEÇAS DAS NOTAS MODIFICANDO hd, Hd, HD etc.
%%text $3- CABEÇAS DE NOTAS PARA PERCUSSÃO
% %text $3- COMO CRIAR NOVOS ACIDENTES (MICROTONALISMO)
%%text $3- DECORAÇÕES !xxx(! E !xxx)! GENÉRICAS
%%text $3- DECORAÇÕES EM HASTES
% %text $3- ABREVIAÇÕES DE OPERADORES BÁSICOS (M,RM,RL,RC,!,SLW,dlw...)
%%text $3- \%\%postscript /Helvetica 20 selectfont count 5 string cvs 0 -40 M show
%%text $3- \%\%beginps ,  \%\%endps E [I:postscript]
%%text $3- SOBRE OS ARQUIVOS syms.c (operadores PS) E deco.c (parâmetros)
% %text $3- BREVE INTRODUÇÃO A POSTSCRIPT
%%text $3- SOBRE ARQUIVOS DE FORMATO

% %postscript 100 -100 moveto currentpoint 2 copy stc moveto
% %postscript 0 40 40 40 40 0 rcurveto
% %postscript 0 30 -40 30 -40 0 rcurveto fill %stroke
% %postscript /Times-Roman findfont 30 scalefont
% %postscript [-1 -.7 0 1 .7 0 ] makefont setfont (texto) show


% %postscript /Helvetica 40 selectfont count 5 string cvs 0 -40 M show
